name: Publish to Registries

on:
  push:
    branches:
      - main
      - master

env:
  NODE_VERSION: '20.x'
  PNPM_VERSION: '9'

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 22.x]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build project
        run: pnpm run build

      - name: Run tests
        run: pnpm test
        env:
          CI: true

  publish:
    name: Publish to NPM & GitHub Package Registry
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check version changes
        uses: EndBug/version-check@v2
        id: check
        with:
          file-url: https://unpkg.com/ioserver@latest/package.json
          static-checking: localIsNew

      - name: Version update detected
        if: steps.check.outputs.changed == 'true'
        run: echo "Version change found! New version:${{ steps.check.outputs.version }} (${{ steps.check.outputs.type }})"

      - name: Setup Node.js for publishing
        if: steps.check.outputs.changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: Install pnpm
        if: steps.check.outputs.changed == 'true'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: Install dependencies
        if: steps.check.outputs.changed == 'true'
        run: pnpm install --frozen-lockfile

      - name: Build project
        if: steps.check.outputs.changed == 'true'
        run: pnpm run build

      - name: Create Git tag
        if: steps.check.outputs.changed == 'true'
        uses: mathieudutour/github-tag-action@v6.2
        with:
          custom_tag: ${{ steps.check.outputs.version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tag_prefix: 'v'

      - name: Create GitHub release
        if: steps.check.outputs.changed == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          tag: v${{ steps.check.outputs.version }}
          name: Release v${{ steps.check.outputs.version }}
          generateReleaseNotes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to NPM
        if: steps.check.outputs.changed == 'true'
        run: pnpm publish --no-git-checks --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}

      - name: Setup Node.js for GitHub Packages
        if: steps.check.outputs.changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://npm.pkg.github.com/'
          scope: '@x42en'

      - name: Prepare package for GitHub Packages
        if: steps.check.outputs.changed == 'true'
        run: pnpm run gpr-setup

      - name: Publish to GitHub Packages
        if: steps.check.outputs.changed == 'true'
        run: pnpm publish --no-git-checks --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore package configuration
        if: steps.check.outputs.changed == 'true'
        run: pnpm run gpr-restore
