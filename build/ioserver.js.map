{
  "version": 3,
  "file": "ioserver.js",
  "sourceRoot": "..",
  "sources": [
    "src/ioserver.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "####################################################\n#         IOServer - v1.2.2                        #\n#                                                  #\n#         Damn simple socket.io server             #\n####################################################\n#             -    Copyright 2020    -             #\n#                                                  #\n#   License: Apache v 2.0                          #\n#   @Author: Ben Mz                                #\n#   @Email: 0x42en (at) users.noreply.github.com   #\n#                                                  #\n####################################################\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# Add required packages\nhttp   = require 'http'\ncloser = require 'http-terminator'\n\n# Set global vars\nVERSION    = '1.2.2'\nPORT       = 8080\nHOST       = 'localhost'\nLOG_LEVEL  = ['EMERGENCY','ALERT','CRITICAL','ERROR','WARNING','NOTIFICATION','INFORMATION','DEBUG']\nTRANSPORTS = ['websocket','htmlfile','xhr-polling','jsonp-polling']\n\nmodule.exports = class IOServer\n    # Define the variables used by the server\n    constructor: (options = {}) ->\n        # Set default options\n        {verbose, host, port, cookie, mode, cors, middleware} = options\n\n        @host = if host then String(host) else HOST\n        try\n            @port = if port then Number(port) else PORT\n        catch e\n            throw new Error 'Invalid port.'\n        \n        @cookie = if cookie then Boolean(cookie) else false\n        @verbose = if String(verbose).toUpperCase() in LOG_LEVEL then String(verbose).toUpperCase() else 'ERROR'\n        \n        # Process transport mode options\n        @mode = []\n        if mode\n            if String(mode).toLowerCase() in TRANSPORTS\n                @mode.push String(mode).toLowerCase()\n            else if mode.constructor is Array\n                for i,m of mode\n                    if String(m).toLowerCase() in TRANSPORTS\n                        @mode.push m\n        else\n            @mode.push 'websocket'\n            @mode.push 'polling'\n        \n        # Setup CORS since necessary in socket.io v3\n        @cors = if cors? and cors then cors else {}\n        if not @cors.methods\n            @cors.methods = ['GET','POST']\n        if not @cors.origin\n            @cors.origin = [\"https://#{@host}\",\"http://#{@host}\"]\n            \n        # Setup internal lists\n        @service_list = {}\n        @manager_list = {}\n        @method_list  = {}\n        @middlewares  = {}\n        \n        # Register the global app handle\n        # that will be passed to all entities\n        @appHandle = { send: @sendTo }\n        @server = null\n    \n    _logify: (level, text) ->\n        current_level = LOG_LEVEL.indexOf @verbose\n        if level <= current_level\n            if level <= 4\n                console.error text\n            else\n                console.log text\n    \n    _unique: (arr) ->\n        hash = {}\n        result = []\n\n        i = 0\n        l = arr.length\n        while i < l\n            unless hash.hasOwnProperty(arr[i])\n                hash[arr[i]] = true\n                result.push arr[i]\n            ++i\n\n        return result\n\n    addManager: ({name, manager}) ->\n        if not name\n            throw \"[!] Manager name is mandatory\"\n        if name and name.length < 2\n            throw \"[!] Manager name MUST be longer than 2 characters\"\n        if name in ['send']\n            throw \"[!] Sorry this is a reserved name\"\n        \n        if not (manager or manager.prototype)\n            throw \"[!] Manager MUST be a function\"\n        \n        try\n            # Register manager with handle reference\n            @manager_list[name] = new manager(@appHandle)\n        catch err\n            @_logify 3, \"[!] Error while instantiate #{name} -> #{err}\"\n\n    # Allow to register easily a class to this server\n    # this class will be bind to a specific namespace\n    addService: ({name, service, middlewares}) ->\n        if not (service and service.prototype)\n            throw \"[!] Service function is mandatory\"\n        \n        # Allow global register for '/'\n        if not name\n            name = '/'\n        \n        # Otherwise service must comply certain rules\n        else if name.length < 2\n            throw \"[!] Service name MUST be longer than 2 characters\"\n        \n        try\n            @service_list[name] = new service(@appHandle)\n        catch err\n            @_logify 3, \"[!] Error while instantiate #{name} -> #{err}\"\n\n        # list methods of object... it will be the list of io actions\n        @method_list[name] = @_dumpMethods service\n        # Register middlewares if necessary\n        @middlewares[name] = if middlewares then middlewares else []\n\n    # Get service running\n    getService: (name) -> @service_list[name]\n\n    # Launch socket IO and get ready to handle events on connection\n    # Pass web server used for connections\n    start: (webapp) ->\n        # If nothing set use standard module\n        if not webapp?\n            webapp = http.createServer()\n\n        d = new Date()\n        day = if d.getDate() < 10 then \"0#{d.getDate()}\" else d.getDate()\n        month = if d.getMonth() < 10 then \"0#{d.getMonth()}\" else d.getMonth()\n        hours = if d.getHours() < 10 then \"0#{d.getHours()}\" else d.getHours()\n        minutes = if d.getMinutes() < 10 then \"0#{d.getMinutes()}\" else d.getMinutes()\n        seconds = if d.getSeconds() < 10 then \"0#{d.getSeconds()}\" else d.getSeconds()\n        @_logify 4, \"################### IOServer v#{VERSION} ###################\"\n        @_logify 5, \"################### #{day}/#{month}/#{d.getFullYear()} - #{hours}:#{minutes}:#{seconds} #########################\"\n        \n        # Start web server\n        @_logify 5, \"[*] Starting server on https://#{@host}:#{@port} ...\"\n        server = webapp.listen @port, @host\n\n        # Start socket.io listener\n        @io = require('socket.io')(server, {\n            transports: @mode,\n            cookie: @cookie\n            cors: @cors\n        })\n\n        ns = {}\n\n        # Register all managers\n        for manager_name, manager of @manager_list\n            @_logify 6, \"[*] register #{manager_name} manager\"\n            @appHandle[manager_name] = manager\n\n        # Register each different services by its namespace\n        for service_name, service of @service_list\n            ns[service_name] = if service_name is '/' then @io.of '/' else @io.of \"/#{service_name}\"\n\n            # Register middleware for namespace \n            for middleware in @middlewares[service_name]\n                mdwr = new middleware()\n                ns[service_name].use mdwr.handle(@appHandle)\n\n            # get ready for connection\n            ns[service_name].on \"connection\", @_handleEvents(service_name)\n            @_logify 6, \"[*] service #{service_name} registered...\"\n        \n        # Create terminator handler\n        @stopper = closer.createHttpTerminator {server}\n        \n    # Force server stop\n    stop: ->\n        @_logify 6, \"[*] Stopping server\"    \n        if @stopper\n            @stopper.terminate()\n\n    # Allow sending message from external app\n    sendTo: ({namespace, event, data, room=false, sid=false}={}) =>\n        ns = @io.of(namespace || \"/\")\n        # Send event to specific sid if set\n        if sid? and sid\n            ns.sockets.get(sid).emit event, data\n        else\n            # Restrict access to clients in room if set\n            sockets = if room? and room then ns.in(room) else ns\n            sockets.emit event, data\n\n    # Once a client is connected, get ready to handle his events\n    _handleEvents: (service_name) ->\n        (socket, next) =>\n            @_logify 5, \"[*] received connection for service #{service_name}\"\n            \n            # The register all user defined functions\n            for index, action of @method_list[service_name]\n                # does not listen for private methods\n                if action.substring(0,1) is '_'\n                    continue\n                # do not listen for constructor method\n                if action is 'constructor'\n                    continue\n                \n                @_logify 6, \"[*] method #{action} of #{service_name} listening...\"\n                socket.on action, @_handleCallback\n                                    service: service_name\n                                    method: action\n                                    socket: socket\n\n    # On a specific event call the appropriate method of object\n    _handleCallback: ({service, method, socket}) ->\n        return (data, callback) =>\n            @_logify 6, \"[*] call method #{method} of service #{service}\"\n            try\n                @service_list[service][method] socket, data, callback\n            catch err\n                if typeof err is 'string'\n                    err = new IOServerError(err, -1)\n\n                payload = { \n                    status: 'error',\n                    type: err.constructor.name or 'Error',\n                    message: err.message or null,\n                    code: err.code or -1\n                }\n\n                @_logify 5, \"Error on #{service}:#{method} execution: #{err}\"\n                if callback\n                    callback payload\n                else\n                    socket.emit 'error', payload\n            \n    # Based on Kri-ban solution\n    # http://stackoverflow.com/questions/7445726/how-to-list-methods-of-inherited-classes-in-coffeescript-or-javascript\n    # Thanks ___ ;)\n    _dumpMethods: (klass) ->\n        result = []\n        k = klass.prototype\n        while k\n            names = Object.getOwnPropertyNames(k)\n            result = result.concat(names)\n            k = Object.getPrototypeOf(k)\n            break if not Object.getPrototypeOf(k) # avoid listing Object properties\n\n        return @_unique(result).sort()\n\n# IO Server error class\nmodule.exports.IOServerError = class IOServerError extends Error\n    constructor: (message, code = -1) ->\n        super(message)\n        @type = @constructor.name\n        @code = code\n    \n    getMessage: () ->\n        return @message\n    \n    getType: () ->\n        return @type\n    \n    getCode: () ->\n        return @code\n\n    toJson: () ->\n        return {\n            message: @message\n            type: @type\n            code: @code\n        }"
  ]
}